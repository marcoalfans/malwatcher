"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/tsparticles-shape-image";
exports.ids = ["vendor-chunks/tsparticles-shape-image"];
exports.modules = {

/***/ "(ssr)/./node_modules/tsparticles-shape-image/esm/GifUtils/ByteStream.js":
/*!*************************************************************************!*\
  !*** ./node_modules/tsparticles-shape-image/esm/GifUtils/ByteStream.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ByteStream: () => (/* binding */ ByteStream)\n/* harmony export */ });\nclass ByteStream {\n    constructor(bytes) {\n        this.pos = 0;\n        this.data = new Uint8ClampedArray(bytes);\n    }\n    getString(count) {\n        const slice = this.data.slice(this.pos, this.pos + count);\n        this.pos += slice.length;\n        return slice.reduce((acc, curr) => acc + String.fromCharCode(curr), \"\");\n    }\n    nextByte() {\n        return this.data[this.pos++];\n    }\n    nextTwoBytes() {\n        this.pos += 2;\n        return this.data[this.pos - 2] + (this.data[this.pos - 1] << 8);\n    }\n    readSubBlocks() {\n        let blockString = \"\", size = 0;\n        do {\n            size = this.data[this.pos++];\n            for (let count = size; --count >= 0; blockString += String.fromCharCode(this.data[this.pos++])) {\n            }\n        } while (size !== 0);\n        return blockString;\n    }\n    readSubBlocksBin() {\n        let size = 0, len = 0;\n        for (let offset = 0; (size = this.data[this.pos + offset]) !== 0; offset += size + 1) {\n            len += size;\n        }\n        const blockData = new Uint8Array(len);\n        for (let i = 0; (size = this.data[this.pos++]) !== 0;) {\n            for (let count = size; --count >= 0; blockData[i++] = this.data[this.pos++]) {\n            }\n        }\n        return blockData;\n    }\n    skipSubBlocks() {\n        for (; this.data[this.pos] !== 0; this.pos += this.data[this.pos] + 1) {\n        }\n        this.pos++;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMtc2hhcGUtaW1hZ2UvZXNtL0dpZlV0aWxzL0J5dGVTdHJlYW0uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxjQUFjO0FBQ2pEO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDZDQUE2QztBQUMxRTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IscUNBQXFDO0FBQzdELG1DQUFtQyxjQUFjO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDJCQUEyQjtBQUMxQztBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiRDpcXFByb2plY3RcXHRlc1xcbm9kZV9tb2R1bGVzXFx0c3BhcnRpY2xlcy1zaGFwZS1pbWFnZVxcZXNtXFxHaWZVdGlsc1xcQnl0ZVN0cmVhbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgQnl0ZVN0cmVhbSB7XG4gICAgY29uc3RydWN0b3IoYnl0ZXMpIHtcbiAgICAgICAgdGhpcy5wb3MgPSAwO1xuICAgICAgICB0aGlzLmRhdGEgPSBuZXcgVWludDhDbGFtcGVkQXJyYXkoYnl0ZXMpO1xuICAgIH1cbiAgICBnZXRTdHJpbmcoY291bnQpIHtcbiAgICAgICAgY29uc3Qgc2xpY2UgPSB0aGlzLmRhdGEuc2xpY2UodGhpcy5wb3MsIHRoaXMucG9zICsgY291bnQpO1xuICAgICAgICB0aGlzLnBvcyArPSBzbGljZS5sZW5ndGg7XG4gICAgICAgIHJldHVybiBzbGljZS5yZWR1Y2UoKGFjYywgY3VycikgPT4gYWNjICsgU3RyaW5nLmZyb21DaGFyQ29kZShjdXJyKSwgXCJcIik7XG4gICAgfVxuICAgIG5leHRCeXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhW3RoaXMucG9zKytdO1xuICAgIH1cbiAgICBuZXh0VHdvQnl0ZXMoKSB7XG4gICAgICAgIHRoaXMucG9zICs9IDI7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFbdGhpcy5wb3MgLSAyXSArICh0aGlzLmRhdGFbdGhpcy5wb3MgLSAxXSA8PCA4KTtcbiAgICB9XG4gICAgcmVhZFN1YkJsb2NrcygpIHtcbiAgICAgICAgbGV0IGJsb2NrU3RyaW5nID0gXCJcIiwgc2l6ZSA9IDA7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIHNpemUgPSB0aGlzLmRhdGFbdGhpcy5wb3MrK107XG4gICAgICAgICAgICBmb3IgKGxldCBjb3VudCA9IHNpemU7IC0tY291bnQgPj0gMDsgYmxvY2tTdHJpbmcgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSh0aGlzLmRhdGFbdGhpcy5wb3MrK10pKSB7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKHNpemUgIT09IDApO1xuICAgICAgICByZXR1cm4gYmxvY2tTdHJpbmc7XG4gICAgfVxuICAgIHJlYWRTdWJCbG9ja3NCaW4oKSB7XG4gICAgICAgIGxldCBzaXplID0gMCwgbGVuID0gMDtcbiAgICAgICAgZm9yIChsZXQgb2Zmc2V0ID0gMDsgKHNpemUgPSB0aGlzLmRhdGFbdGhpcy5wb3MgKyBvZmZzZXRdKSAhPT0gMDsgb2Zmc2V0ICs9IHNpemUgKyAxKSB7XG4gICAgICAgICAgICBsZW4gKz0gc2l6ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBibG9ja0RhdGEgPSBuZXcgVWludDhBcnJheShsZW4pO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgKHNpemUgPSB0aGlzLmRhdGFbdGhpcy5wb3MrK10pICE9PSAwOykge1xuICAgICAgICAgICAgZm9yIChsZXQgY291bnQgPSBzaXplOyAtLWNvdW50ID49IDA7IGJsb2NrRGF0YVtpKytdID0gdGhpcy5kYXRhW3RoaXMucG9zKytdKSB7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJsb2NrRGF0YTtcbiAgICB9XG4gICAgc2tpcFN1YkJsb2NrcygpIHtcbiAgICAgICAgZm9yICg7IHRoaXMuZGF0YVt0aGlzLnBvc10gIT09IDA7IHRoaXMucG9zICs9IHRoaXMuZGF0YVt0aGlzLnBvc10gKyAxKSB7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wb3MrKztcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tsparticles-shape-image/esm/GifUtils/ByteStream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tsparticles-shape-image/esm/GifUtils/Constants.js":
/*!************************************************************************!*\
  !*** ./node_modules/tsparticles-shape-image/esm/GifUtils/Constants.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InterlaceOffsets: () => (/* binding */ InterlaceOffsets),\n/* harmony export */   InterlaceSteps: () => (/* binding */ InterlaceSteps)\n/* harmony export */ });\nconst InterlaceOffsets = [0, 4, 2, 1];\nconst InterlaceSteps = [8, 8, 4, 2];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMtc2hhcGUtaW1hZ2UvZXNtL0dpZlV0aWxzL0NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFPO0FBQ0EiLCJzb3VyY2VzIjpbIkQ6XFxQcm9qZWN0XFx0ZXNcXG5vZGVfbW9kdWxlc1xcdHNwYXJ0aWNsZXMtc2hhcGUtaW1hZ2VcXGVzbVxcR2lmVXRpbHNcXENvbnN0YW50cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgSW50ZXJsYWNlT2Zmc2V0cyA9IFswLCA0LCAyLCAxXTtcbmV4cG9ydCBjb25zdCBJbnRlcmxhY2VTdGVwcyA9IFs4LCA4LCA0LCAyXTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tsparticles-shape-image/esm/GifUtils/Constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tsparticles-shape-image/esm/GifUtils/Utils.js":
/*!********************************************************************!*\
  !*** ./node_modules/tsparticles-shape-image/esm/GifUtils/Utils.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeGIF: () => (/* binding */ decodeGIF),\n/* harmony export */   getGIFLoopAmount: () => (/* binding */ getGIFLoopAmount)\n/* harmony export */ });\n/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Constants */ \"(ssr)/./node_modules/tsparticles-shape-image/esm/GifUtils/Constants.js\");\n/* harmony import */ var _ByteStream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ByteStream */ \"(ssr)/./node_modules/tsparticles-shape-image/esm/GifUtils/ByteStream.js\");\n\n\nfunction parseColorTable(byteStream, count) {\n    const colors = [];\n    for (let i = 0; i < count; i++) {\n        colors.push({\n            r: byteStream.data[byteStream.pos],\n            g: byteStream.data[byteStream.pos + 1],\n            b: byteStream.data[byteStream.pos + 2],\n        });\n        byteStream.pos += 3;\n    }\n    return colors;\n}\nasync function parseExtensionBlock(byteStream, gif, getFrameIndex, getTransparencyIndex) {\n    switch (byteStream.nextByte()) {\n        case 249: {\n            const frame = gif.frames[getFrameIndex(false)];\n            byteStream.pos++;\n            const packedByte = byteStream.nextByte();\n            frame.GCreserved = (packedByte & 0xe0) >>> 5;\n            frame.disposalMethod = (packedByte & 0x1c) >>> 2;\n            frame.userInputDelayFlag = (packedByte & 2) === 2;\n            const transparencyFlag = (packedByte & 1) === 1;\n            frame.delayTime = byteStream.nextTwoBytes() * 0xa;\n            const transparencyIndex = byteStream.nextByte();\n            if (transparencyFlag) {\n                getTransparencyIndex(transparencyIndex);\n            }\n            byteStream.pos++;\n            break;\n        }\n        case 255: {\n            byteStream.pos++;\n            const applicationExtension = {\n                identifier: byteStream.getString(8),\n                authenticationCode: byteStream.getString(3),\n                data: byteStream.readSubBlocksBin(),\n            };\n            gif.applicationExtensions.push(applicationExtension);\n            break;\n        }\n        case 254: {\n            gif.comments.push([getFrameIndex(false), byteStream.readSubBlocks()]);\n            break;\n        }\n        case 1: {\n            if (gif.globalColorTable.length === 0) {\n                throw new EvalError(\"plain text extension without global color table\");\n            }\n            byteStream.pos++;\n            gif.frames[getFrameIndex(false)].plainTextData = {\n                left: byteStream.nextTwoBytes(),\n                top: byteStream.nextTwoBytes(),\n                width: byteStream.nextTwoBytes(),\n                height: byteStream.nextTwoBytes(),\n                charSize: {\n                    width: byteStream.nextTwoBytes(),\n                    height: byteStream.nextTwoBytes(),\n                },\n                foregroundColor: byteStream.nextByte(),\n                backgroundColor: byteStream.nextByte(),\n                text: byteStream.readSubBlocks(),\n            };\n            break;\n        }\n        default:\n            byteStream.skipSubBlocks();\n            break;\n    }\n}\nasync function parseImageBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback) {\n    const frame = gif.frames[getFrameIndex(true)];\n    frame.left = byteStream.nextTwoBytes();\n    frame.top = byteStream.nextTwoBytes();\n    frame.width = byteStream.nextTwoBytes();\n    frame.height = byteStream.nextTwoBytes();\n    const packedByte = byteStream.nextByte(), localColorTableFlag = (packedByte & 0x80) === 0x80, interlacedFlag = (packedByte & 0x40) === 0x40;\n    frame.sortFlag = (packedByte & 0x20) === 0x20;\n    frame.reserved = (packedByte & 0x18) >>> 3;\n    const localColorCount = 1 << ((packedByte & 7) + 1);\n    if (localColorTableFlag) {\n        frame.localColorTable = parseColorTable(byteStream, localColorCount);\n    }\n    const getColor = (index) => {\n        const { r, g, b } = (localColorTableFlag ? frame.localColorTable : gif.globalColorTable)[index];\n        return { r, g, b, a: index === getTransparencyIndex(null) ? (avgAlpha ? ~~((r + g + b) / 3) : 0) : 255 };\n    };\n    const image = (() => {\n        try {\n            return new ImageData(frame.width, frame.height, { colorSpace: \"srgb\" });\n        }\n        catch (error) {\n            if (error instanceof DOMException && error.name === \"IndexSizeError\") {\n                return null;\n            }\n            throw error;\n        }\n    })();\n    if (image == null) {\n        throw new EvalError(\"GIF frame size is to large\");\n    }\n    const minCodeSize = byteStream.nextByte(), imageData = byteStream.readSubBlocksBin(), clearCode = 1 << minCodeSize;\n    const readBits = (pos, len) => {\n        const bytePos = pos >>> 3, bitPos = pos & 7;\n        return (((imageData[bytePos] + (imageData[bytePos + 1] << 8) + (imageData[bytePos + 2] << 16)) &\n            (((1 << len) - 1) << bitPos)) >>>\n            bitPos);\n    };\n    if (interlacedFlag) {\n        for (let code = 0, size = minCodeSize + 1, pos = 0, dic = [[0]], pass = 0; pass < 4; pass++) {\n            if (_Constants__WEBPACK_IMPORTED_MODULE_0__.InterlaceOffsets[pass] < frame.height) {\n                for (let pixelPos = 0, lineIndex = 0;;) {\n                    const last = code;\n                    code = readBits(pos, size);\n                    pos += size + 1;\n                    if (code === clearCode) {\n                        size = minCodeSize + 1;\n                        dic.length = clearCode + 2;\n                        for (let i = 0; i < dic.length; i++) {\n                            dic[i] = i < clearCode ? [i] : [];\n                        }\n                    }\n                    else {\n                        if (code >= dic.length) {\n                            dic.push(dic[last].concat(dic[last][0]));\n                        }\n                        else if (last !== clearCode) {\n                            dic.push(dic[last].concat(dic[code][0]));\n                        }\n                        for (let i = 0; i < dic[code].length; i++) {\n                            const { r, g, b, a } = getColor(dic[code][i]);\n                            image.data.set([r, g, b, a], _Constants__WEBPACK_IMPORTED_MODULE_0__.InterlaceOffsets[pass] * frame.width +\n                                _Constants__WEBPACK_IMPORTED_MODULE_0__.InterlaceSteps[pass] * lineIndex +\n                                (pixelPos % (frame.width * 4)));\n                            pixelPos += 4;\n                        }\n                        if (dic.length === 1 << size && size < 0xc) {\n                            size++;\n                        }\n                    }\n                    if (pixelPos === frame.width * 4 * (lineIndex + 1)) {\n                        lineIndex++;\n                        if (_Constants__WEBPACK_IMPORTED_MODULE_0__.InterlaceOffsets[pass] + _Constants__WEBPACK_IMPORTED_MODULE_0__.InterlaceSteps[pass] * lineIndex >= frame.height) {\n                            break;\n                        }\n                    }\n                }\n            }\n            progressCallback?.(byteStream.pos / (byteStream.data.length - 1), getFrameIndex(false) + 1, image, { x: frame.left, y: frame.top }, { width: gif.width, height: gif.height });\n        }\n        frame.image = image;\n        frame.bitmap = await createImageBitmap(image);\n    }\n    else {\n        for (let code = 0, size = minCodeSize + 1, pos = 0, dic = [[0]], pixelPos = -4;;) {\n            const last = code;\n            code = readBits(pos, size);\n            pos += size;\n            if (code === clearCode) {\n                size = minCodeSize + 1;\n                dic.length = clearCode + 2;\n                for (let i = 0; i < dic.length; i++) {\n                    dic[i] = i < clearCode ? [i] : [];\n                }\n            }\n            else {\n                if (code === clearCode + 1) {\n                    break;\n                }\n                if (code >= dic.length) {\n                    dic.push(dic[last].concat(dic[last][0]));\n                }\n                else if (last !== clearCode) {\n                    dic.push(dic[last].concat(dic[code][0]));\n                }\n                for (let i = 0; i < dic[code].length; i++) {\n                    const { r, g, b, a } = getColor(dic[code][i]);\n                    image.data.set([r, g, b, a], (pixelPos += 4));\n                }\n                if (dic.length >= 1 << size && size < 0xc) {\n                    size++;\n                }\n            }\n        }\n        frame.image = image;\n        frame.bitmap = await createImageBitmap(image);\n        progressCallback?.((byteStream.pos + 1) / byteStream.data.length, getFrameIndex(false) + 1, frame.image, { x: frame.left, y: frame.top }, { width: gif.width, height: gif.height });\n    }\n}\nasync function parseBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback) {\n    switch (byteStream.nextByte()) {\n        case 59:\n            return true;\n        case 44:\n            await parseImageBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback);\n            break;\n        case 33:\n            await parseExtensionBlock(byteStream, gif, getFrameIndex, getTransparencyIndex);\n            break;\n        default:\n            throw new EvalError(\"undefined block found\");\n    }\n    return false;\n}\nfunction getGIFLoopAmount(gif) {\n    for (const extension of gif.applicationExtensions) {\n        if (extension.identifier + extension.authenticationCode !== \"NETSCAPE2.0\") {\n            continue;\n        }\n        return extension.data[1] + (extension.data[2] << 8);\n    }\n    return NaN;\n}\nasync function decodeGIF(gifURL, progressCallback, avgAlpha) {\n    if (!avgAlpha)\n        avgAlpha = false;\n    const res = await fetch(gifURL);\n    if (!res.ok && res.status === 404) {\n        throw new EvalError(\"file not found\");\n    }\n    const buffer = await res.arrayBuffer();\n    const gif = {\n        width: 0,\n        height: 0,\n        totalTime: 0,\n        colorRes: 0,\n        pixelAspectRatio: 0,\n        frames: [],\n        sortFlag: false,\n        globalColorTable: [],\n        backgroundImage: new ImageData(1, 1, { colorSpace: \"srgb\" }),\n        comments: [],\n        applicationExtensions: [],\n    }, byteStream = new _ByteStream__WEBPACK_IMPORTED_MODULE_1__.ByteStream(new Uint8ClampedArray(buffer));\n    if (byteStream.getString(6) !== \"GIF89a\") {\n        throw new Error(\"not a supported GIF file\");\n    }\n    gif.width = byteStream.nextTwoBytes();\n    gif.height = byteStream.nextTwoBytes();\n    const packedByte = byteStream.nextByte(), globalColorTableFlag = (packedByte & 0x80) === 0x80;\n    gif.colorRes = (packedByte & 0x70) >>> 4;\n    gif.sortFlag = (packedByte & 8) === 8;\n    const globalColorCount = 1 << ((packedByte & 7) + 1), backgroundColorIndex = byteStream.nextByte();\n    gif.pixelAspectRatio = byteStream.nextByte();\n    if (gif.pixelAspectRatio !== 0) {\n        gif.pixelAspectRatio = (gif.pixelAspectRatio + 0xf) / 0x40;\n    }\n    if (globalColorTableFlag) {\n        gif.globalColorTable = parseColorTable(byteStream, globalColorCount);\n    }\n    const backgroundImage = (() => {\n        try {\n            return new ImageData(gif.width, gif.height, { colorSpace: \"srgb\" });\n        }\n        catch (error) {\n            if (error instanceof DOMException && error.name === \"IndexSizeError\") {\n                return null;\n            }\n            throw error;\n        }\n    })();\n    if (backgroundImage == null) {\n        throw new Error(\"GIF frame size is to large\");\n    }\n    const { r, g, b } = gif.globalColorTable[backgroundColorIndex];\n    backgroundImage.data.set(globalColorTableFlag ? [r, g, b, 255] : [0, 0, 0, 0]);\n    for (let i = 4; i < backgroundImage.data.length; i *= 2) {\n        backgroundImage.data.copyWithin(i, 0, i);\n    }\n    gif.backgroundImage = backgroundImage;\n    let frameIndex = -1, incrementFrameIndex = true, transparencyIndex = -1;\n    const getframeIndex = (increment) => {\n        if (increment) {\n            incrementFrameIndex = true;\n        }\n        return frameIndex;\n    };\n    const getTransparencyIndex = (newValue) => {\n        if (newValue != null) {\n            transparencyIndex = newValue;\n        }\n        return transparencyIndex;\n    };\n    try {\n        do {\n            if (incrementFrameIndex) {\n                gif.frames.push({\n                    left: 0,\n                    top: 0,\n                    width: 0,\n                    height: 0,\n                    disposalMethod: 0,\n                    image: new ImageData(1, 1, { colorSpace: \"srgb\" }),\n                    plainTextData: null,\n                    userInputDelayFlag: false,\n                    delayTime: 0,\n                    sortFlag: false,\n                    localColorTable: [],\n                    reserved: 0,\n                    GCreserved: 0,\n                });\n                frameIndex++;\n                transparencyIndex = -1;\n                incrementFrameIndex = false;\n            }\n        } while (!(await parseBlock(byteStream, gif, avgAlpha, getframeIndex, getTransparencyIndex, progressCallback)));\n        gif.frames.length--;\n        for (const frame of gif.frames) {\n            if (frame.userInputDelayFlag && frame.delayTime === 0) {\n                gif.totalTime = Infinity;\n                break;\n            }\n            gif.totalTime += frame.delayTime;\n        }\n        return gif;\n    }\n    catch (error) {\n        if (error instanceof EvalError) {\n            throw new Error(`error while parsing frame ${frameIndex} \"${error.message}\"`);\n        }\n        throw error;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tsparticles-shape-image/esm/GifUtils/Utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tsparticles-shape-image/esm/ImageDrawer.js":
/*!*****************************************************************!*\
  !*** ./node_modules/tsparticles-shape-image/esm/ImageDrawer.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ImageDrawer: () => (/* binding */ ImageDrawer)\n/* harmony export */ });\n/* harmony import */ var tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tsparticles-engine */ \"(ssr)/./node_modules/tsparticles-engine/esm/Core/Utils/Constants.js\");\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils */ \"(ssr)/./node_modules/tsparticles-shape-image/esm/Utils.js\");\n\n\nclass ImageDrawer {\n    constructor(engine) {\n        this.loadImageShape = async (imageShape) => {\n            if (!this._engine.loadImage) {\n                throw new Error(`${tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.errorPrefix} image shape not initialized`);\n            }\n            await this._engine.loadImage({\n                gif: imageShape.gif,\n                name: imageShape.name,\n                replaceColor: imageShape.replaceColor ?? imageShape.replace_color ?? false,\n                src: imageShape.src,\n            });\n        };\n        this._engine = engine;\n    }\n    addImage(image) {\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        this._engine.images.push(image);\n    }\n    draw(context, particle, radius, opacity, delta) {\n        const image = particle.image, element = image?.element;\n        if (!image) {\n            return;\n        }\n        context.globalAlpha = opacity;\n        if (image.gif && image.gifData) {\n            const offscreenCanvas = new OffscreenCanvas(image.gifData.width, image.gifData.height), offscreenContext = offscreenCanvas.getContext(\"2d\");\n            if (!offscreenContext) {\n                throw new Error(\"could not create offscreen canvas context\");\n            }\n            offscreenContext.imageSmoothingQuality = \"low\";\n            offscreenContext.imageSmoothingEnabled = false;\n            offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n            if (particle.gifLoopCount === undefined) {\n                particle.gifLoopCount = image.gifLoopCount ?? 0;\n            }\n            let frameIndex = particle.gifFrame ?? 0;\n            const pos = { x: -image.gifData.width * 0.5, y: -image.gifData.height * 0.5 }, frame = image.gifData.frames[frameIndex];\n            if (particle.gifTime === undefined) {\n                particle.gifTime = 0;\n            }\n            if (!frame.bitmap) {\n                return;\n            }\n            context.scale(radius / image.gifData.width, radius / image.gifData.height);\n            switch (frame.disposalMethod) {\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 0:\n                    offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                    context.drawImage(offscreenCanvas, pos.x, pos.y);\n                    offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                    break;\n                case 1:\n                    offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                    context.drawImage(offscreenCanvas, pos.x, pos.y);\n                    break;\n                case 2:\n                    offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                    context.drawImage(offscreenCanvas, pos.x, pos.y);\n                    offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                    if (image.gifData.globalColorTable.length === 0) {\n                        offscreenContext.putImageData(image.gifData.frames[0].image, pos.x + frame.left, pos.y + frame.top);\n                    }\n                    else {\n                        offscreenContext.putImageData(image.gifData.backgroundImage, pos.x, pos.y);\n                    }\n                    break;\n                case 3:\n                    {\n                        const previousImageData = offscreenContext.getImageData(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                        offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                        context.drawImage(offscreenCanvas, pos.x, pos.y);\n                        offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                        offscreenContext.putImageData(previousImageData, 0, 0);\n                    }\n                    break;\n            }\n            particle.gifTime += delta.value;\n            if (particle.gifTime > frame.delayTime) {\n                particle.gifTime -= frame.delayTime;\n                if (++frameIndex >= image.gifData.frames.length) {\n                    if (--particle.gifLoopCount <= 0) {\n                        return;\n                    }\n                    frameIndex = 0;\n                    offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                }\n                particle.gifFrame = frameIndex;\n            }\n            context.scale(image.gifData.width / radius, image.gifData.height / radius);\n        }\n        else if (element) {\n            const ratio = image.ratio, pos = {\n                x: -radius,\n                y: -radius,\n            };\n            context.drawImage(element, pos.x, pos.y, radius * 2, (radius * 2) / ratio);\n        }\n        context.globalAlpha = 1;\n    }\n    getSidesCount() {\n        return 12;\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (!options.preload || !this._engine.loadImage) {\n            return;\n        }\n        for (const imageData of options.preload) {\n            await this._engine.loadImage(imageData);\n        }\n    }\n    loadShape(particle) {\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        const imageData = particle.shapeData, image = this._engine.images.find((t) => t.name === imageData.name || t.source === imageData.src);\n        if (!image) {\n            this.loadImageShape(imageData).then(() => {\n                this.loadShape(particle);\n            });\n        }\n    }\n    particleInit(container, particle) {\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        const images = this._engine.images, imageData = particle.shapeData, color = particle.getFillColor(), image = images.find((t) => t.name === imageData.name || t.source === imageData.src);\n        if (!image) {\n            return;\n        }\n        const replaceColor = imageData.replaceColor ?? imageData.replace_color ?? image.replaceColor;\n        if (image.loading) {\n            setTimeout(() => {\n                this.particleInit(container, particle);\n            });\n            return;\n        }\n        (async () => {\n            let imageRes;\n            if (image.svgData && color) {\n                imageRes = await (0,_Utils__WEBPACK_IMPORTED_MODULE_1__.replaceImageColor)(image, imageData, color, particle);\n            }\n            else {\n                imageRes = {\n                    color,\n                    data: image,\n                    element: image.element,\n                    gif: image.gif,\n                    gifData: image.gifData,\n                    gifLoopCount: image.gifLoopCount,\n                    loaded: true,\n                    ratio: imageData.width && imageData.height ? imageData.width / imageData.height : image.ratio ?? 1,\n                    replaceColor: replaceColor,\n                    source: imageData.src,\n                };\n            }\n            if (!imageRes.ratio) {\n                imageRes.ratio = 1;\n            }\n            const fill = imageData.fill ?? particle.fill, close = imageData.close ?? particle.close, imageShape = {\n                image: imageRes,\n                fill,\n                close,\n            };\n            particle.image = imageShape.image;\n            particle.fill = imageShape.fill;\n            particle.close = imageShape.close;\n        })();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tsparticles-shape-image/esm/ImageDrawer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tsparticles-shape-image/esm/ImagePreloader.js":
/*!********************************************************************!*\
  !*** ./node_modules/tsparticles-shape-image/esm/ImagePreloader.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ImagePreloaderPlugin: () => (/* binding */ ImagePreloaderPlugin)\n/* harmony export */ });\n/* harmony import */ var _Options_Classes_Preload__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Options/Classes/Preload */ \"(ssr)/./node_modules/tsparticles-shape-image/esm/Options/Classes/Preload.js\");\n\nclass ImagePreloaderPlugin {\n    constructor(engine) {\n        this.id = \"imagePreloader\";\n        this._engine = engine;\n    }\n    getPlugin() {\n        return {};\n    }\n    loadOptions(options, source) {\n        if (!source || !source.preload) {\n            return;\n        }\n        if (!options.preload) {\n            options.preload = [];\n        }\n        const preloadOptions = options.preload;\n        for (const item of source.preload) {\n            const existing = preloadOptions.find((t) => t.name === item.name || t.src === item.src);\n            if (existing) {\n                existing.load(item);\n            }\n            else {\n                const preload = new _Options_Classes_Preload__WEBPACK_IMPORTED_MODULE_0__.Preload();\n                preload.load(item);\n                preloadOptions.push(preload);\n            }\n        }\n    }\n    needsPlugin() {\n        return true;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMtc2hhcGUtaW1hZ2UvZXNtL0ltYWdlUHJlbG9hZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQW9EO0FBQzdDO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLDZEQUFPO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiRDpcXFByb2plY3RcXHRlc1xcbm9kZV9tb2R1bGVzXFx0c3BhcnRpY2xlcy1zaGFwZS1pbWFnZVxcZXNtXFxJbWFnZVByZWxvYWRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcmVsb2FkIH0gZnJvbSBcIi4vT3B0aW9ucy9DbGFzc2VzL1ByZWxvYWRcIjtcbmV4cG9ydCBjbGFzcyBJbWFnZVByZWxvYWRlclBsdWdpbiB7XG4gICAgY29uc3RydWN0b3IoZW5naW5lKSB7XG4gICAgICAgIHRoaXMuaWQgPSBcImltYWdlUHJlbG9hZGVyXCI7XG4gICAgICAgIHRoaXMuX2VuZ2luZSA9IGVuZ2luZTtcbiAgICB9XG4gICAgZ2V0UGx1Z2luKCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIGxvYWRPcHRpb25zKG9wdGlvbnMsIHNvdXJjZSkge1xuICAgICAgICBpZiAoIXNvdXJjZSB8fCAhc291cmNlLnByZWxvYWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW9wdGlvbnMucHJlbG9hZCkge1xuICAgICAgICAgICAgb3B0aW9ucy5wcmVsb2FkID0gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJlbG9hZE9wdGlvbnMgPSBvcHRpb25zLnByZWxvYWQ7XG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBzb3VyY2UucHJlbG9hZCkge1xuICAgICAgICAgICAgY29uc3QgZXhpc3RpbmcgPSBwcmVsb2FkT3B0aW9ucy5maW5kKCh0KSA9PiB0Lm5hbWUgPT09IGl0ZW0ubmFtZSB8fCB0LnNyYyA9PT0gaXRlbS5zcmMpO1xuICAgICAgICAgICAgaWYgKGV4aXN0aW5nKSB7XG4gICAgICAgICAgICAgICAgZXhpc3RpbmcubG9hZChpdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByZWxvYWQgPSBuZXcgUHJlbG9hZCgpO1xuICAgICAgICAgICAgICAgIHByZWxvYWQubG9hZChpdGVtKTtcbiAgICAgICAgICAgICAgICBwcmVsb2FkT3B0aW9ucy5wdXNoKHByZWxvYWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIG5lZWRzUGx1Z2luKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tsparticles-shape-image/esm/ImagePreloader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tsparticles-shape-image/esm/Options/Classes/Preload.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/tsparticles-shape-image/esm/Options/Classes/Preload.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Preload: () => (/* binding */ Preload)\n/* harmony export */ });\nclass Preload {\n    constructor() {\n        this.src = \"\";\n        this.gif = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.gif !== undefined) {\n            this.gif = data.gif;\n        }\n        if (data.height !== undefined) {\n            this.height = data.height;\n        }\n        if (data.name !== undefined) {\n            this.name = data.name;\n        }\n        if (data.replaceColor !== undefined) {\n            this.replaceColor = data.replaceColor;\n        }\n        if (data.src !== undefined) {\n            this.src = data.src;\n        }\n        if (data.width !== undefined) {\n            this.width = data.width;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMtc2hhcGUtaW1hZ2UvZXNtL09wdGlvbnMvQ2xhc3Nlcy9QcmVsb2FkLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJEOlxcUHJvamVjdFxcdGVzXFxub2RlX21vZHVsZXNcXHRzcGFydGljbGVzLXNoYXBlLWltYWdlXFxlc21cXE9wdGlvbnNcXENsYXNzZXNcXFByZWxvYWQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIFByZWxvYWQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnNyYyA9IFwiXCI7XG4gICAgICAgIHRoaXMuZ2lmID0gZmFsc2U7XG4gICAgfVxuICAgIGxvYWQoZGF0YSkge1xuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5naWYgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5naWYgPSBkYXRhLmdpZjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5oZWlnaHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSBkYXRhLmhlaWdodDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5uYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IGRhdGEubmFtZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5yZXBsYWNlQ29sb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5yZXBsYWNlQ29sb3IgPSBkYXRhLnJlcGxhY2VDb2xvcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5zcmMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5zcmMgPSBkYXRhLnNyYztcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS53aWR0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLndpZHRoID0gZGF0YS53aWR0aDtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tsparticles-shape-image/esm/Options/Classes/Preload.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tsparticles-shape-image/esm/Utils.js":
/*!***********************************************************!*\
  !*** ./node_modules/tsparticles-shape-image/esm/Utils.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   downloadSvgImage: () => (/* binding */ downloadSvgImage),\n/* harmony export */   loadGifImage: () => (/* binding */ loadGifImage),\n/* harmony export */   loadImage: () => (/* binding */ loadImage),\n/* harmony export */   replaceImageColor: () => (/* binding */ replaceImageColor)\n/* harmony export */ });\n/* harmony import */ var tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tsparticles-engine */ \"(ssr)/./node_modules/tsparticles-engine/esm/Utils/ColorUtils.js\");\n/* harmony import */ var tsparticles_engine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tsparticles-engine */ \"(ssr)/./node_modules/tsparticles-engine/esm/Utils/Utils.js\");\n/* harmony import */ var tsparticles_engine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tsparticles-engine */ \"(ssr)/./node_modules/tsparticles-engine/esm/Core/Utils/Constants.js\");\n/* harmony import */ var _GifUtils_Utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./GifUtils/Utils */ \"(ssr)/./node_modules/tsparticles-shape-image/esm/GifUtils/Utils.js\");\n\n\nconst currentColorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d.]+%?\\))|currentcolor/gi;\nfunction replaceColorSvg(imageShape, color, opacity) {\n    const { svgData } = imageShape;\n    if (!svgData) {\n        return \"\";\n    }\n    const colorStyle = (0,tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.getStyleFromHsl)(color, opacity);\n    if (svgData.includes(\"fill\")) {\n        return svgData.replace(currentColorRegex, () => colorStyle);\n    }\n    const preFillIndex = svgData.indexOf(\">\");\n    return `${svgData.substring(0, preFillIndex)} fill=\"${colorStyle}\"${svgData.substring(preFillIndex)}`;\n}\nasync function loadImage(image) {\n    return new Promise((resolve) => {\n        image.loading = true;\n        const img = new Image();\n        image.element = img;\n        img.addEventListener(\"load\", () => {\n            image.loading = false;\n            resolve();\n        });\n        img.addEventListener(\"error\", () => {\n            image.element = undefined;\n            image.error = true;\n            image.loading = false;\n            (0,tsparticles_engine__WEBPACK_IMPORTED_MODULE_1__.getLogger)().error(`${tsparticles_engine__WEBPACK_IMPORTED_MODULE_2__.errorPrefix} loading image: ${image.source}`);\n            resolve();\n        });\n        img.src = image.source;\n    });\n}\nasync function loadGifImage(image) {\n    if (image.type !== \"gif\") {\n        await loadImage(image);\n        return;\n    }\n    image.loading = true;\n    try {\n        image.gifData = await (0,_GifUtils_Utils__WEBPACK_IMPORTED_MODULE_3__.decodeGIF)(image.source);\n        image.gifLoopCount = (0,_GifUtils_Utils__WEBPACK_IMPORTED_MODULE_3__.getGIFLoopAmount)(image.gifData) ?? 0;\n        if (image.gifLoopCount === 0) {\n            image.gifLoopCount = Infinity;\n        }\n    }\n    catch {\n        image.error = true;\n    }\n    image.loading = false;\n}\nasync function downloadSvgImage(image) {\n    if (image.type !== \"svg\") {\n        await loadImage(image);\n        return;\n    }\n    image.loading = true;\n    const response = await fetch(image.source);\n    if (!response.ok) {\n        (0,tsparticles_engine__WEBPACK_IMPORTED_MODULE_1__.getLogger)().error(`${tsparticles_engine__WEBPACK_IMPORTED_MODULE_2__.errorPrefix} Image not found`);\n        image.error = true;\n    }\n    else {\n        image.svgData = await response.text();\n    }\n    image.loading = false;\n}\nfunction replaceImageColor(image, imageData, color, particle) {\n    const svgColoredData = replaceColorSvg(image, color, particle.opacity?.value ?? 1), imageRes = {\n        color,\n        gif: imageData.gif,\n        data: {\n            ...image,\n            svgData: svgColoredData,\n        },\n        loaded: false,\n        ratio: imageData.width / imageData.height,\n        replaceColor: imageData.replaceColor ?? imageData.replace_color,\n        source: imageData.src,\n    };\n    return new Promise((resolve) => {\n        const svg = new Blob([svgColoredData], { type: \"image/svg+xml\" }), domUrl = URL || window.URL || window.webkitURL || window, url = domUrl.createObjectURL(svg), img = new Image();\n        img.addEventListener(\"load\", () => {\n            imageRes.loaded = true;\n            imageRes.element = img;\n            resolve(imageRes);\n            domUrl.revokeObjectURL(url);\n        });\n        img.addEventListener(\"error\", async () => {\n            domUrl.revokeObjectURL(url);\n            const img2 = {\n                ...image,\n                error: false,\n                loading: true,\n            };\n            await loadImage(img2);\n            imageRes.loaded = true;\n            imageRes.element = img2.element;\n            resolve(imageRes);\n        });\n        img.src = url;\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMtc2hhcGUtaW1hZ2UvZXNtL1V0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQTZFO0FBQ2Q7QUFDL0QseUNBQXlDLEVBQUUsRUFBRSxJQUFJLFlBQVksRUFBRSwrQkFBK0IsSUFBSTtBQUNsRztBQUNBLFlBQVksVUFBVTtBQUN0QjtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsbUVBQWU7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLG9DQUFvQyxRQUFRLFdBQVcsR0FBRyxnQ0FBZ0M7QUFDeEc7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSw2REFBUyxZQUFZLDJEQUFXLEVBQUUsaUJBQWlCLGFBQWE7QUFDNUU7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QiwwREFBUztBQUN2Qyw2QkFBNkIsaUVBQWdCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLDZEQUFTLFlBQVksMkRBQVcsRUFBRTtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCx1QkFBdUI7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMIiwic291cmNlcyI6WyJEOlxcUHJvamVjdFxcdGVzXFxub2RlX21vZHVsZXNcXHRzcGFydGljbGVzLXNoYXBlLWltYWdlXFxlc21cXFV0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVycm9yUHJlZml4LCBnZXRMb2dnZXIsIGdldFN0eWxlRnJvbUhzbCB9IGZyb20gXCJ0c3BhcnRpY2xlcy1lbmdpbmVcIjtcbmltcG9ydCB7IGRlY29kZUdJRiwgZ2V0R0lGTG9vcEFtb3VudCB9IGZyb20gXCIuL0dpZlV0aWxzL1V0aWxzXCI7XG5jb25zdCBjdXJyZW50Q29sb3JSZWdleCA9IC8oIyg/OlswLTlhLWZdezJ9KXsyLDR9fCgjWzAtOWEtZl17M30pfChyZ2J8aHNsKWE/XFwoKC0/XFxkKyU/WyxcXHNdKyl7MiwzfVxccypbXFxkLl0rJT9cXCkpfGN1cnJlbnRjb2xvci9naTtcbmZ1bmN0aW9uIHJlcGxhY2VDb2xvclN2ZyhpbWFnZVNoYXBlLCBjb2xvciwgb3BhY2l0eSkge1xuICAgIGNvbnN0IHsgc3ZnRGF0YSB9ID0gaW1hZ2VTaGFwZTtcbiAgICBpZiAoIXN2Z0RhdGEpIHtcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuICAgIGNvbnN0IGNvbG9yU3R5bGUgPSBnZXRTdHlsZUZyb21Ic2woY29sb3IsIG9wYWNpdHkpO1xuICAgIGlmIChzdmdEYXRhLmluY2x1ZGVzKFwiZmlsbFwiKSkge1xuICAgICAgICByZXR1cm4gc3ZnRGF0YS5yZXBsYWNlKGN1cnJlbnRDb2xvclJlZ2V4LCAoKSA9PiBjb2xvclN0eWxlKTtcbiAgICB9XG4gICAgY29uc3QgcHJlRmlsbEluZGV4ID0gc3ZnRGF0YS5pbmRleE9mKFwiPlwiKTtcbiAgICByZXR1cm4gYCR7c3ZnRGF0YS5zdWJzdHJpbmcoMCwgcHJlRmlsbEluZGV4KX0gZmlsbD1cIiR7Y29sb3JTdHlsZX1cIiR7c3ZnRGF0YS5zdWJzdHJpbmcocHJlRmlsbEluZGV4KX1gO1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxvYWRJbWFnZShpbWFnZSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICBpbWFnZS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgY29uc3QgaW1nID0gbmV3IEltYWdlKCk7XG4gICAgICAgIGltYWdlLmVsZW1lbnQgPSBpbWc7XG4gICAgICAgIGltZy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCAoKSA9PiB7XG4gICAgICAgICAgICBpbWFnZS5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBpbWcuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsICgpID0+IHtcbiAgICAgICAgICAgIGltYWdlLmVsZW1lbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBpbWFnZS5lcnJvciA9IHRydWU7XG4gICAgICAgICAgICBpbWFnZS5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICBnZXRMb2dnZXIoKS5lcnJvcihgJHtlcnJvclByZWZpeH0gbG9hZGluZyBpbWFnZTogJHtpbWFnZS5zb3VyY2V9YCk7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBpbWcuc3JjID0gaW1hZ2Uuc291cmNlO1xuICAgIH0pO1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxvYWRHaWZJbWFnZShpbWFnZSkge1xuICAgIGlmIChpbWFnZS50eXBlICE9PSBcImdpZlwiKSB7XG4gICAgICAgIGF3YWl0IGxvYWRJbWFnZShpbWFnZSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaW1hZ2UubG9hZGluZyA9IHRydWU7XG4gICAgdHJ5IHtcbiAgICAgICAgaW1hZ2UuZ2lmRGF0YSA9IGF3YWl0IGRlY29kZUdJRihpbWFnZS5zb3VyY2UpO1xuICAgICAgICBpbWFnZS5naWZMb29wQ291bnQgPSBnZXRHSUZMb29wQW1vdW50KGltYWdlLmdpZkRhdGEpID8/IDA7XG4gICAgICAgIGlmIChpbWFnZS5naWZMb29wQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgIGltYWdlLmdpZkxvb3BDb3VudCA9IEluZmluaXR5O1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIHtcbiAgICAgICAgaW1hZ2UuZXJyb3IgPSB0cnVlO1xuICAgIH1cbiAgICBpbWFnZS5sb2FkaW5nID0gZmFsc2U7XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZG93bmxvYWRTdmdJbWFnZShpbWFnZSkge1xuICAgIGlmIChpbWFnZS50eXBlICE9PSBcInN2Z1wiKSB7XG4gICAgICAgIGF3YWl0IGxvYWRJbWFnZShpbWFnZSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaW1hZ2UubG9hZGluZyA9IHRydWU7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChpbWFnZS5zb3VyY2UpO1xuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgZ2V0TG9nZ2VyKCkuZXJyb3IoYCR7ZXJyb3JQcmVmaXh9IEltYWdlIG5vdCBmb3VuZGApO1xuICAgICAgICBpbWFnZS5lcnJvciA9IHRydWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpbWFnZS5zdmdEYXRhID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xuICAgIH1cbiAgICBpbWFnZS5sb2FkaW5nID0gZmFsc2U7XG59XG5leHBvcnQgZnVuY3Rpb24gcmVwbGFjZUltYWdlQ29sb3IoaW1hZ2UsIGltYWdlRGF0YSwgY29sb3IsIHBhcnRpY2xlKSB7XG4gICAgY29uc3Qgc3ZnQ29sb3JlZERhdGEgPSByZXBsYWNlQ29sb3JTdmcoaW1hZ2UsIGNvbG9yLCBwYXJ0aWNsZS5vcGFjaXR5Py52YWx1ZSA/PyAxKSwgaW1hZ2VSZXMgPSB7XG4gICAgICAgIGNvbG9yLFxuICAgICAgICBnaWY6IGltYWdlRGF0YS5naWYsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIC4uLmltYWdlLFxuICAgICAgICAgICAgc3ZnRGF0YTogc3ZnQ29sb3JlZERhdGEsXG4gICAgICAgIH0sXG4gICAgICAgIGxvYWRlZDogZmFsc2UsXG4gICAgICAgIHJhdGlvOiBpbWFnZURhdGEud2lkdGggLyBpbWFnZURhdGEuaGVpZ2h0LFxuICAgICAgICByZXBsYWNlQ29sb3I6IGltYWdlRGF0YS5yZXBsYWNlQ29sb3IgPz8gaW1hZ2VEYXRhLnJlcGxhY2VfY29sb3IsXG4gICAgICAgIHNvdXJjZTogaW1hZ2VEYXRhLnNyYyxcbiAgICB9O1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICBjb25zdCBzdmcgPSBuZXcgQmxvYihbc3ZnQ29sb3JlZERhdGFdLCB7IHR5cGU6IFwiaW1hZ2Uvc3ZnK3htbFwiIH0pLCBkb21VcmwgPSBVUkwgfHwgd2luZG93LlVSTCB8fCB3aW5kb3cud2Via2l0VVJMIHx8IHdpbmRvdywgdXJsID0gZG9tVXJsLmNyZWF0ZU9iamVjdFVSTChzdmcpLCBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgaW1nLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsICgpID0+IHtcbiAgICAgICAgICAgIGltYWdlUmVzLmxvYWRlZCA9IHRydWU7XG4gICAgICAgICAgICBpbWFnZVJlcy5lbGVtZW50ID0gaW1nO1xuICAgICAgICAgICAgcmVzb2x2ZShpbWFnZVJlcyk7XG4gICAgICAgICAgICBkb21VcmwucmV2b2tlT2JqZWN0VVJMKHVybCk7XG4gICAgICAgIH0pO1xuICAgICAgICBpbWcuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGRvbVVybC5yZXZva2VPYmplY3RVUkwodXJsKTtcbiAgICAgICAgICAgIGNvbnN0IGltZzIgPSB7XG4gICAgICAgICAgICAgICAgLi4uaW1hZ2UsXG4gICAgICAgICAgICAgICAgZXJyb3I6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGxvYWRpbmc6IHRydWUsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYXdhaXQgbG9hZEltYWdlKGltZzIpO1xuICAgICAgICAgICAgaW1hZ2VSZXMubG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGltYWdlUmVzLmVsZW1lbnQgPSBpbWcyLmVsZW1lbnQ7XG4gICAgICAgICAgICByZXNvbHZlKGltYWdlUmVzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGltZy5zcmMgPSB1cmw7XG4gICAgfSk7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tsparticles-shape-image/esm/Utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tsparticles-shape-image/esm/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/tsparticles-shape-image/esm/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadImageShape: () => (/* binding */ loadImageShape)\n/* harmony export */ });\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils */ \"(ssr)/./node_modules/tsparticles-shape-image/esm/Utils.js\");\n/* harmony import */ var _ImageDrawer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ImageDrawer */ \"(ssr)/./node_modules/tsparticles-shape-image/esm/ImageDrawer.js\");\n/* harmony import */ var _ImagePreloader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ImagePreloader */ \"(ssr)/./node_modules/tsparticles-shape-image/esm/ImagePreloader.js\");\n/* harmony import */ var tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tsparticles-engine */ \"(ssr)/./node_modules/tsparticles-engine/esm/Core/Utils/Constants.js\");\n\n\n\n\nfunction addLoadImageToEngine(engine) {\n    if (engine.loadImage) {\n        return;\n    }\n    engine.loadImage = async (data) => {\n        if (!data.name && !data.src) {\n            throw new Error(`${tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.errorPrefix} no image source provided`);\n        }\n        if (!engine.images) {\n            engine.images = [];\n        }\n        if (engine.images.find((t) => t.name === data.name || t.source === data.src)) {\n            return;\n        }\n        try {\n            const image = {\n                gif: data.gif ?? false,\n                name: data.name ?? data.src,\n                source: data.src,\n                type: data.src.substring(data.src.length - 3),\n                error: false,\n                loading: true,\n                replaceColor: data.replaceColor,\n                ratio: data.width && data.height ? data.width / data.height : undefined,\n            };\n            engine.images.push(image);\n            const imageFunc = data.gif ? _Utils__WEBPACK_IMPORTED_MODULE_1__.loadGifImage : data.replaceColor ? _Utils__WEBPACK_IMPORTED_MODULE_1__.downloadSvgImage : _Utils__WEBPACK_IMPORTED_MODULE_1__.loadImage;\n            await imageFunc(image);\n        }\n        catch {\n            throw new Error(`${tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.errorPrefix} ${data.name ?? data.src} not found`);\n        }\n    };\n}\nasync function loadImageShape(engine, refresh = true) {\n    addLoadImageToEngine(engine);\n    const preloader = new _ImagePreloader__WEBPACK_IMPORTED_MODULE_2__.ImagePreloaderPlugin(engine);\n    await engine.addPlugin(preloader, refresh);\n    await engine.addShape([\"image\", \"images\"], new _ImageDrawer__WEBPACK_IMPORTED_MODULE_3__.ImageDrawer(engine), refresh);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMtc2hhcGUtaW1hZ2UvZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQW9FO0FBQ3hCO0FBQ1k7QUFDUDtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsMkRBQVcsRUFBRTtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxnREFBWSx1QkFBdUIsb0RBQWdCLEdBQUcsNkNBQVM7QUFDeEc7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLDJEQUFXLEVBQUUsRUFBRSx1QkFBdUI7QUFDckU7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLDBCQUEwQixpRUFBb0I7QUFDOUM7QUFDQSxtREFBbUQscURBQVc7QUFDOUQiLCJzb3VyY2VzIjpbIkQ6XFxQcm9qZWN0XFx0ZXNcXG5vZGVfbW9kdWxlc1xcdHNwYXJ0aWNsZXMtc2hhcGUtaW1hZ2VcXGVzbVxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZG93bmxvYWRTdmdJbWFnZSwgbG9hZEdpZkltYWdlLCBsb2FkSW1hZ2UgfSBmcm9tIFwiLi9VdGlsc1wiO1xuaW1wb3J0IHsgSW1hZ2VEcmF3ZXIgfSBmcm9tIFwiLi9JbWFnZURyYXdlclwiO1xuaW1wb3J0IHsgSW1hZ2VQcmVsb2FkZXJQbHVnaW4gfSBmcm9tIFwiLi9JbWFnZVByZWxvYWRlclwiO1xuaW1wb3J0IHsgZXJyb3JQcmVmaXggfSBmcm9tIFwidHNwYXJ0aWNsZXMtZW5naW5lXCI7XG5mdW5jdGlvbiBhZGRMb2FkSW1hZ2VUb0VuZ2luZShlbmdpbmUpIHtcbiAgICBpZiAoZW5naW5lLmxvYWRJbWFnZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGVuZ2luZS5sb2FkSW1hZ2UgPSBhc3luYyAoZGF0YSkgPT4ge1xuICAgICAgICBpZiAoIWRhdGEubmFtZSAmJiAhZGF0YS5zcmMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtlcnJvclByZWZpeH0gbm8gaW1hZ2Ugc291cmNlIHByb3ZpZGVkYCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFlbmdpbmUuaW1hZ2VzKSB7XG4gICAgICAgICAgICBlbmdpbmUuaW1hZ2VzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVuZ2luZS5pbWFnZXMuZmluZCgodCkgPT4gdC5uYW1lID09PSBkYXRhLm5hbWUgfHwgdC5zb3VyY2UgPT09IGRhdGEuc3JjKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBpbWFnZSA9IHtcbiAgICAgICAgICAgICAgICBnaWY6IGRhdGEuZ2lmID8/IGZhbHNlLFxuICAgICAgICAgICAgICAgIG5hbWU6IGRhdGEubmFtZSA/PyBkYXRhLnNyYyxcbiAgICAgICAgICAgICAgICBzb3VyY2U6IGRhdGEuc3JjLFxuICAgICAgICAgICAgICAgIHR5cGU6IGRhdGEuc3JjLnN1YnN0cmluZyhkYXRhLnNyYy5sZW5ndGggLSAzKSxcbiAgICAgICAgICAgICAgICBlcnJvcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgbG9hZGluZzogdHJ1ZSxcbiAgICAgICAgICAgICAgICByZXBsYWNlQ29sb3I6IGRhdGEucmVwbGFjZUNvbG9yLFxuICAgICAgICAgICAgICAgIHJhdGlvOiBkYXRhLndpZHRoICYmIGRhdGEuaGVpZ2h0ID8gZGF0YS53aWR0aCAvIGRhdGEuaGVpZ2h0IDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGVuZ2luZS5pbWFnZXMucHVzaChpbWFnZSk7XG4gICAgICAgICAgICBjb25zdCBpbWFnZUZ1bmMgPSBkYXRhLmdpZiA/IGxvYWRHaWZJbWFnZSA6IGRhdGEucmVwbGFjZUNvbG9yID8gZG93bmxvYWRTdmdJbWFnZSA6IGxvYWRJbWFnZTtcbiAgICAgICAgICAgIGF3YWl0IGltYWdlRnVuYyhpbWFnZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2gge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke2Vycm9yUHJlZml4fSAke2RhdGEubmFtZSA/PyBkYXRhLnNyY30gbm90IGZvdW5kYCk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxvYWRJbWFnZVNoYXBlKGVuZ2luZSwgcmVmcmVzaCA9IHRydWUpIHtcbiAgICBhZGRMb2FkSW1hZ2VUb0VuZ2luZShlbmdpbmUpO1xuICAgIGNvbnN0IHByZWxvYWRlciA9IG5ldyBJbWFnZVByZWxvYWRlclBsdWdpbihlbmdpbmUpO1xuICAgIGF3YWl0IGVuZ2luZS5hZGRQbHVnaW4ocHJlbG9hZGVyLCByZWZyZXNoKTtcbiAgICBhd2FpdCBlbmdpbmUuYWRkU2hhcGUoW1wiaW1hZ2VcIiwgXCJpbWFnZXNcIl0sIG5ldyBJbWFnZURyYXdlcihlbmdpbmUpLCByZWZyZXNoKTtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tsparticles-shape-image/esm/index.js\n");

/***/ })

};
;